class widgetClassElementSticky extends elementorModules.frontend.handlers.Base{getDefaultElements(){return{$target:this.$element,elType:this.$element.data("element_type"),elId:this.$element.data("id"),settings:this.$element.data("eac_settings-sticky")||{},stickySettings:"data-eac_settings-sticky",$observerTarget:null,optionsObserve:{root:null,rootMargin:"0px 0px 1000px 0px",threshold:1},intersectObserver:null,resizeObserver:null,isSticky:!1,isEditMode:Boolean(elementorFrontend.isEditMode()),positionClass:"",adminBar:document.getElementById("wpadminbar"),sticky_top:null}}onInit(){super.onInit(),this.elements.isEditMode||(Object.keys(this.elements.settings).length>0&&void 0!==this.elements.settings.sticky&&"yes"===this.elements.settings.sticky&&this.isDeviceSelected()&&this.initStickyElement(),this.elements.isSticky?window.IntersectionObserver&&(this.elements.intersectObserver=new IntersectionObserver(this.observeElementInViewport.bind(this),this.elements.optionsObserve),this.elements.intersectObserver.observe(this.elements.$observerTarget[0]),this.elements.resizeObserver=new ResizeObserver(this.observeResizeViewport.bind(this)),this.elements.resizeObserver.observe(this.elements.$observerTarget[0])):this.cleanTarget())}initStickyElement(){this.elements.adminBar?this.elements.sticky_top=this.elements.settings.up+this.elements.adminBar.clientHeight+"px":this.elements.sticky_top=this.elements.settings.up+"px",this.elements.isSticky=!0,this.elements.positionClass=this.elements.settings.class,this.elements.settings.fixed?(this.elements.optionsObserve.threshold=0,this.elements.$observerTarget=jQuery('<div id="eac-element_sticky-observer-'+this.elements.elId+'" style="position:relative;"></div>').insertAfter(this.elements.$target)):(this.elements.$observerTarget=this.elements.$target,this.elements.optionsObserve.rootMargin="-"+this.elements.settings.up+"px 0px -"+this.elements.settings.down+"px 0px")}isDeviceSelected(){const e=elementorFrontend.getCurrentDeviceMode();return-1!==jQuery.inArray(e,this.elements.settings.devices)}cleanTarget(){this.elements.$target.removeClass(this.elements.positionClass),this.elements.$target.removeAttr(this.elements.stickySettings),this.elements.$target.css("top",""),this.elements.$target.css("bottom",""),this.elements.$target.css("z-index","auto"),jQuery("eac-element_sticky-observer-"+this.elements.elId).remove()}observeElementInViewport(e,t){const s=this.elements.settings;s.fixed&&0===e[0].intersectionRatio?(this.elements.$target[0].classList.add(this.elements.positionClass),this.elements.$target[0].style.top=this.elements.sticky_top,this.elements.$target[0].style.zIndex=s.zindex):!s.fixed&&e[0].isIntersecting?(this.elements.$target[0].classList.add(this.elements.positionClass),this.elements.$target[0].style.top=this.elements.sticky_top,this.elements.$target[0].style.bottom=s.down+"px",this.elements.$target[0].style.zIndex=s.zindex,t.disconnect()):(this.elements.$target[0].classList.remove(this.elements.positionClass),this.elements.$target[0].style.top="",this.elements.$target[0].style.bottom="",this.elements.$target[0].style.zIndex="auto")}observeResizeViewport(e){this.isDeviceSelected()?this.elements.intersectObserver instanceof IntersectionObserver&&this.elements.intersectObserver.observe(this.elements.$observerTarget[0]):this.elements.intersectObserver.disconnect()}}jQuery(window).on("elementor/frontend/init",(()=>{const e=e=>{elementorFrontend.elementsHandler.addHandler(widgetClassElementSticky,{$element:e})};elementorFrontend.hooks.addAction("frontend/element_ready/section",e),elementorFrontend.hooks.addAction("frontend/element_ready/column",e),elementorFrontend.hooks.addAction("frontend/element_ready/widget",e),elementorFrontend.hooks.addAction("frontend/element_ready/container",e)}));